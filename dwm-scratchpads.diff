diff --color --unified --text --color dwm/config.def.h dwm.new/config.def.h
--- dwm/config.def.h	2020-07-24 13:06:54.378768920 +0200
+++ dwm.new/config.def.h	2020-07-24 13:20:04.683621985 +0200
@@ -24,6 +24,20 @@
 	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
 };

+typedef struct {
+	const char *name;
+	const void *cmd;
+} Sp;
+const char *spcmd1[] = {"st", "-n", "spterm", "-g", "120x34", NULL };
+const char *spcmd2[] = {"st", "-n", "spfm", "-g", "144x41", "-e", "ranger", NULL };
+const char *spcmd3[] = {"st", "-n", "spcalc", "-g", "80x30", "-e", "qalc", NULL };
+static Sp scratchpads[] = {
+	/* name          cmd  */
+	{"spterm",      spcmd1},
+	{"spranger",    spcmd2},
+	{"spcalc",      spcmd3},
+};
+
 static const char *const autostart[] = {
 	"picom", NULL,
 	NULL /* terminate */
@@ -42,6 +54,9 @@
 	{ "Firefox", NULL,     NULL,           1 << 8,    0,          0,          0,          -1,        -1 },
 	{ "st",      NULL,     NULL,           0,         0,          0,          1,          -1,        -1 },
 	{ NULL,      NULL,     "Event Tester", 0,         0,          1,          0,           1,        -1 }, /* xev */
+	{ NULL,		 "spterm", NULL,		   SPTAG(0),  0,          1,          1,          -1,        -1 },
+	{ NULL,		 "spfm",   NULL,		   SPTAG(1),  0,          1,          1,          -1,        -1 },
+	{ NULL,		 "spcalc", NULL,		   SPTAG(2),  0,          1,          1,          -1,        -1 },
 };

 /* layout(s) */
@@ -98,6 +112,9 @@
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY,            			XK_y,      togglescratch,  {.ui = 0 } },
+	{ MODKEY,            			XK_u,      togglescratch,  {.ui = 1 } },
+	{ 0,                            XF86XK_Calculator,         togglescratch,   {.ui = 2 } },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff --color --unified --text --color dwm/dwm.c dwm.new/dwm.c
--- dwm/dwm.c	2020-07-24 13:06:54.378768920 +0200
+++ dwm.new/dwm.c	2020-07-24 13:26:51.008132133 +0200
@@ -56,7 +56,10 @@
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw + gappx)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw + gappx)
-#define TAGMASK                 ((1 << LENGTH(tags)) - 1)
+#define NUMTAGS					(LENGTH(tags) + LENGTH(scratchpads))
+#define TAGMASK     			((1 << NUMTAGS) - 1)
+#define SPTAG(i) 				((1 << LENGTH(tags)) << (i))
+#define SPTAGMASK   			(((1 << LENGTH(scratchpads))-1) << LENGTH(tags))
 #define TEXTW(X)                (drw_fontset_getwidth(drw, (X)) + lrpad)

 #define SYSTEM_TRAY_REQUEST_DOCK    0
@@ -254,6 +257,7 @@
 static void tile(Monitor *);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
+static void togglescratch(const Arg *arg);
 static void togglefullscr(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
@@ -434,6 +438,11 @@
 			c->noswallow  = r->noswallow;
 			c->isfloating = r->isfloating;
 			c->tags |= r->tags;
+			if ((r->tags & SPTAGMASK) && r->isfloating) {
+				c->x = c->mon->wx + (c->mon->ww / 2 - WIDTH(c) / 2);
+				c->y = c->mon->wy + (c->mon->wh / 2 - HEIGHT(c) / 2);
+			}
+
 			for (m = mons; m && m->num != r->monitor; m = m->next);
 			if (m)
 				c->mon = m;
@@ -443,7 +452,7 @@
 		XFree(ch.res_class);
 	if (ch.res_name)
 		XFree(ch.res_name);
-	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
+	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : (c->mon->tagset[c->mon->seltags] & ~SPTAGMASK);
 }

 int
@@ -2058,6 +2067,10 @@
 	if (!c)
 		return;
 	if (ISVISIBLE(c)) {
+		if ((c->tags & SPTAGMASK) && c->isfloating) {
+			c->x = c->mon->wx + (c->mon->ww / 2 - WIDTH(c) / 2);
+			c->y = c->mon->wy + (c->mon->wh / 2 - HEIGHT(c) / 2);
+		}
 		/* show clients top down */
 		XMoveWindow(dpy, c->win, c->x, c->y);
 		if ((!c->mon->lt[c->mon->sellt]->arrange || c->isfloating) && !c->isfullscreen)
@@ -2191,6 +2204,32 @@
 }

 void
+togglescratch(const Arg *arg)
+{
+	Client *c;
+	unsigned int found = 0;
+	unsigned int scratchtag = SPTAG(arg->ui);
+	Arg sparg = {.v = scratchpads[arg->ui].cmd};
+
+	for (c = selmon->clients; c && !(found = c->tags & scratchtag); c = c->next);
+	if (found) {
+		unsigned int newtagset = selmon->tagset[selmon->seltags] ^ scratchtag;
+		if (newtagset) {
+			selmon->tagset[selmon->seltags] = newtagset;
+			focus(NULL);
+			arrange(selmon);
+		}
+		if (ISVISIBLE(c)) {
+			focus(c);
+			restack(selmon);
+		}
+	} else {
+		selmon->tagset[selmon->seltags] |= scratchtag;
+		spawn(&sparg);
+	}
+}
+
+void
 togglefullscr(const Arg *arg)
 {
   if(selmon->sel)
